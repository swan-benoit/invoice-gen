package com.rwangum.invoice.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class FactureAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFactureAllPropertiesEquals(Facture expected, Facture actual) {
        assertFactureAutoGeneratedPropertiesEquals(expected, actual);
        assertFactureAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFactureAllUpdatablePropertiesEquals(Facture expected, Facture actual) {
        assertFactureUpdatableFieldsEquals(expected, actual);
        assertFactureUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFactureAutoGeneratedPropertiesEquals(Facture expected, Facture actual) {
        assertThat(actual)
            .as("Verify Facture auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFactureUpdatableFieldsEquals(Facture expected, Facture actual) {
        assertThat(actual)
            .as("Verify Facture relevant properties")
            .satisfies(a -> assertThat(a.getNumero()).as("check numero").isEqualTo(expected.getNumero()))
            .satisfies(a -> assertThat(a.getDateFacture()).as("check dateFacture").isEqualTo(expected.getDateFacture()))
            .satisfies(a -> assertThat(a.getDateEcheance()).as("check dateEcheance").isEqualTo(expected.getDateEcheance()))
            .satisfies(a -> assertThat(a.getStatut()).as("check statut").isEqualTo(expected.getStatut()))
            .satisfies(a -> assertThat(a.getNotes()).as("check notes").isEqualTo(expected.getNotes()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFactureUpdatableRelationshipsEquals(Facture expected, Facture actual) {
        assertThat(actual)
            .as("Verify Facture relationships")
            .satisfies(a -> assertThat(a.getClient()).as("check client").isEqualTo(expected.getClient()));
    }
}
